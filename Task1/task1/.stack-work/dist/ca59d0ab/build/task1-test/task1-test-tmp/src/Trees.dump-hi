
==================== FINAL INTERFACE ====================
2017-10-31 12:14:29.9057435 UTC

interface main@main:Trees 8002
  interface hash: 45397f4d4a480e32c34eef048c39c119
  ABI hash: 5a8e22d89cfedd5780f94f54eeddaa65
  export-list hash: d83706b0ad04a1a6bc67b3ed275d704d
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 7825ce622124759228f465c6a43debe3
  sig of: Nothing
  used TH splices: False
  where
exports:
  Trees.beginParents
  Trees.getParents
  Trees.getParentsH
  Trees.removeDuplicates
  Trees.view
  Trees.Node{Trees.Node}
module dependencies:
package dependencies: base-4.9.1.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Monoid base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:GHC.Generics base-4.9.1.0:GHC.IO.Exception
                         base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:Data.List 7349774f430841349c90dfd1144aea97
import  -/  base-4.9.1.0:GHC.Base 4caea1123ecf4b46e27cbccd6d279377
import  -/  base-4.9.1.0:GHC.List d11eb227c1c6fbfd89bb781d72eaea0d
import  -/  base-4.9.1.0:GHC.Show eca5834daba3b6a2bbbe64ab52056707
import  -/  base-4.9.1.0:Prelude 74b3e204395920329f6de9d97206abe9
import  -/  ghc-prim-0.5.0.0:GHC.Classes 16d48e012d23eaef9bca91ccdd572c02
52def62fb1bcb1592f10fdf01476ec0e
  $fEqNode :: GHC.Classes.Eq Trees.Node
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Trees.Node Trees.$fEqNode_$c== Trees.$fEqNode_$c/= -}
52def62fb1bcb1592f10fdf01476ec0e
  $fEqNode_$c/= :: Trees.Node -> Trees.Node -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Trees.Node) (y :: Trees.Node) ->
                 GHC.Classes.not (Trees.$fEqNode_$c== x y)) -}
52def62fb1bcb1592f10fdf01476ec0e
  $fEqNode_$c== :: Trees.Node -> Trees.Node -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,A)><S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Trees.Node) (ds1 :: Trees.Node) ->
                 case ds of wild { Trees.Node s ds2 ->
                 case ds1 of wild1 { Trees.Node t ds3 ->
                 GHC.Base.eqString s t } }) -}
52def62fb1bcb1592f10fdf01476ec0e
  $fShowNode :: GHC.Show.Show Trees.Node
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Trees.Node
                  Trees.$fShowNode_$cshowsPrec
                  Trees.$fShowNode_$cshow
                  Trees.$fShowNode_$cshowList -}
52def62fb1bcb1592f10fdf01476ec0e
  $fShowNode1 :: Trees.Node -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2,
     Unfolding: (\ (x :: Trees.Node) (s :: GHC.Base.String)[OneShot] ->
                 case x of wild { Trees.Node s1 ds ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   (GHC.Types.:
                      @ GHC.Types.Char
                      GHC.Show.shows6
                      (GHC.Show.showLitString s1 Trees.$fShowNode2))
                   s }) -}
3d9eb5b4667b3fd35930286f56992dbc
  $fShowNode2 :: [GHC.Types.Char]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.shows6
                   (GHC.Types.[] @ GHC.Types.Char)) -}
52def62fb1bcb1592f10fdf01476ec0e
  $fShowNode_$cshow :: Trees.Node -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,A)>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Trees.Node) ->
                 case ds of wild { Trees.Node s ds1 ->
                 GHC.Show.$fShow[]_$s$cshow1 s }) -}
52def62fb1bcb1592f10fdf01476ec0e
  $fShowNode_$cshowList :: [Trees.Node] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ (ls :: [Trees.Node]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ Trees.Node Trees.$fShowNode1 ls s) -}
52def62fb1bcb1592f10fdf01476ec0e
  $fShowNode_$cshowsPrec ::
    GHC.Types.Int -> Trees.Node -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U(1*U,A)><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Int)
                   (x :: Trees.Node)
                   (s :: GHC.Base.String) ->
                 case x of wild { Trees.Node s1 ds1 ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n
                      (GHC.Types.:
                         @ GHC.Types.Char
                         GHC.Show.shows6
                         (GHC.Show.showLitString
                            s1
                            (GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.shows6
                               (GHC.Types.[] @ GHC.Types.Char)))))
                   s }) -}
f1240355fef38654c90b3c40b231912e
  $tc'Node :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6801734418211490995##
                   1513907838478463257##
                   Trees.$trModule
                   Trees.$tc'Node1) -}
11443633825f1a2ffc52cfb039d08140
  $tc'Node1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Node"#) -}
5b6b2d4946caf15baa67d032f7ce0ca6
  $tcNode :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10648321231362505840##
                   5676247969748642933##
                   Trees.$trModule
                   Trees.$tcNode1) -}
e502b65b6f94e95c90a9eefb6a43f974
  $tcNode1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Node"#) -}
09920c318f59369563a3c09d1ba3ea5e
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Trees.$trModule2 Trees.$trModule1) -}
b3ca2a9f4207ebc1f26c5a12ad1b5f7d
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Trees"#) -}
1425b9d7a32d34395ee8c652b2cb2787
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
52def62fb1bcb1592f10fdf01476ec0e
  data Node = Node GHC.Base.String [Trees.Node]
    RecFlag: Recursive
6f699284c7f1fba7aa39f5cc60d211e2
  beginParents :: Trees.Node -> [Trees.Node]
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Trees.Node) ->
                 case ds of wild { Trees.Node ds1 n -> Trees.getParentsH n }) -}
c8990c7aee56e0e866543e28cf3414a1
  getParents :: Trees.Node -> [Trees.Node]
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Trees.Node) ->
                 case ds of wild { Trees.Node s n ->
                 Trees.removeDuplicates (Trees.getParentsH n) }) -}
55484268b14e140441e290edc6605f67
  getParentsH :: [Trees.Node] -> [Trees.Node]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
4863e21fb0a738ffbe6dc2d56dd5c6b5
  removeDuplicates :: [Trees.Node] -> [Trees.Node]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
141e736795b3ca98db6b39a1ffbef08c
  view :: [Trees.Node] -> GHC.Base.String
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
instance [safe] GHC.Classes.Eq [Trees.Node] = Trees.$fEqNode
instance [safe] GHC.Show.Show [Trees.Node] = Trees.$fShowNode
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

